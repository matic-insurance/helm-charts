{{- if .Values.websocket.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "rails.name" . }}-websocket
  labels:
    app: {{ include "rails.name" . }}-websocket
    app.kubernetes.io/name: {{ include "rails.name" . }}-websocket
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ include "rails.version" . }}
    environment: {{ include "rails.environment" . }}
    product: {{ .Values.product }}
    helm.sh/chart: {{ include "rails.chart" . }}
spec:
  replicas: {{ .Values.websocket.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "rails.name" . }}-websocket
      app.kubernetes.io/name: {{ include "rails.name" . }}-websocket
      app.kubernetes.io/instance: {{ .Release.Name }}
      environment: {{ include "rails.environment" . }}
      product: {{ .Values.product }}
  minReadySeconds: {{ .Values.replica.minReadySeconds }}
  progressDeadlineSeconds: {{ .Values.replica.progressDeadlineSeconds }}
  revisionHistoryLimit: {{ .Values.replica.revisionHistoryLimit }}
  strategy:
    type: {{ .Values.replica.strategy }}
  template:
    metadata:
      labels:
        app: {{ include "rails.name" . }}-websocket
        app.kubernetes.io/name: {{ include "rails.name" . }}-websocket
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/version: {{ include "rails.version" . }}
        environment: {{ include "rails.environment" . }}
        product: {{ .Values.product }}
        helm.sh/chart: {{ include "rails.chart" . }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        {{- range $key, $value := .Values.websocket.annotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
{{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.product }}
{{- end }}
      containers:
      - name: {{ include "rails.name" . }}-websocket
        image: {{ .Values.image.repository }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["sh","-c","{{ .Values.websocket.command }}"]
        {{- if $.Values.websocket.lifecycle.enabled }}
        lifecycle:
{{ toYaml $.Values.websocket.lifecycle.hooks | indent 10 }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.websocket.port }}
        env:
        - name: SENTRY_RELEASE
          value: "{{ include "rails.product" . }}-{{ include "rails.version" . }}"
        - name: PORT
          value: {{ .Values.websocket.port | quote }}
        {{- if .Values.datadog.enabled }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_VERSION
          value: "{{ include "rails.version" . }}"
        {{- end }}
        {{- if .Values.websocket.extraEnvs }}
{{ toYaml .Values.websocket.extraEnvs | indent 8 }}
        {{- end }}
        {{- if .Values.custom_configs.enabled }}
        envFrom:
        - secretRef:
           name: {{ .Values.product }}-envvars
        volumeMounts:
          {{- range $index, $config := .Values.custom_configs.files}}
          - name: {{ $.Values.product }}{{ $config | replace "/" "-" | replace "." "-" | replace "_" "-"}}-vol
            mountPath: {{ $config }}
            subPath: {{ base $config }}
            readOnly: true
          {{- end }}
{{- if .Values.dynamic_sa_token.enabled }}
          - name: dynamic-sa-token
            mountPath: /var/run/secrets/tokens
            readOnly: true
{{- end }}
{{- if .Values.vault.enabled }}
          - name: vault-token
            mountPath: /vault-k8s-init-dir
{{- end }}
        {{- end }}
        {{- if .Values.websocket.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: {{ .Values.websocket.startupProbe.path }}
            port: {{ .Values.websocket.startupProbe.port }}
          initialDelaySeconds: {{ .Values.websocket.startupProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.websocket.startupProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.websocket.startupProbe.periodSeconds }}
          successThreshold: {{ .Values.websocket.startupProbe.successThreshold }}
          failureThreshold: {{ .Values.websocket.startupProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.websocket.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.websocket.readinessProbe.path }}
            port: {{ .Values.websocket.readinessProbe.port }}
          initialDelaySeconds: {{ .Values.websocket.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.websocket.readinessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.websocket.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.websocket.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.websocket.readinessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.websocket.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.websocket.livenessProbe.path }}
            port: {{ .Values.websocket.livenessProbe.port }}
          initialDelaySeconds: {{ .Values.websocket.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.websocket.livenessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.websocket.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.websocket.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.websocket.livenessProbe.failureThreshold }}
        {{- end }}
        resources:
{{ toYaml .Values.websocket.resources | indent 10 }}
{{- if .Values.vault.enabled }}
      initContainers:
      - name: get-vault-token
        image: {{ .Values.vault.initImage }}
        command:
        - sh
        - /get_vault_token.sh
        envFrom:
        - secretRef:
           name: {{ .Values.product }}-envvars
        volumeMounts:
          - name: vault-token
            mountPath: /vault-k8s-init-dir
{{- end }}
      dnsPolicy: {{ default "ClusterFirst" .Values.dnsPolicy }}
      terminationGracePeriodSeconds: {{ default "30" $.Values.websocket.terminationGracePeriodSeconds }}
      securityContext:
        fsGroup: {{ .Values.securityContextID }}
        runAsUser: {{ .Values.securityContextID }}
      {{- if .Values.image_private_registry.enabled }}
      imagePullSecrets:
       - name: {{ .Values.image_private_registry.secret }}
      {{- end }}
      {{ if .Values.custom_configs.enabled -}}
      volumes:
        {{- range $index, $config := .Values.custom_configs.files}}
        - name: {{ $.Values.product }}{{ $config | replace "/" "-" | replace "." "-" | replace "_" "-"}}-vol
          secret:
            secretName: {{ $.Values.product }}{{ $config | replace "/" "-" | replace "." "-" | replace "_" "-"}}
        {{- end }}
      {{- end }}
{{- if .Values.dynamic_sa_token.enabled }}
        - name: dynamic-sa-token
          projected:
            sources:
            - serviceAccountToken:
                path: dynamic-sa-token
                expirationSeconds: {{ .Values.dynamic_sa_token.expirationSeconds }}
{{- end }}
{{- if .Values.vault.enabled }}
        - name: vault-token
          emptyDir: {}
{{- end }}
{{- with .Values.websocket.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- end }}
