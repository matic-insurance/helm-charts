{{/*
Render config files as Secret. Config files should be listed `.Values.global.application.configFiles`
In final applicaiton chart in order to mount files one should:
  1. create template `config-files.yaml` with following content
  ```yaml
  {{ include "application-helpers.config-files.tpl" . }}
  ```

  2. Define list of files in values:
  ```yaml
  global:
    application:
      configFiles:
        - /app/config/app_settings.local.yaml
        - /app/config/variables.txt
  ```


*/}}

{{- define "application-helpers.config-files.tpl" -}}
{{- with $.Values.global.application.configFiles }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "application-helpers.configs.files-runtime.volume-name" $ }}
  labels:
    {{- /*  Override component as it is not defined at place where we call this helper  */}}
    {{- include "application-helpers.labels" (merge (dict "Values" (dict "component" "configs")) $) | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation
type: Opaque
data:
{{- range $name, $path := . }}
  {{- $fileTemplateString := default "configs/{{ $.Values.global.application.environment }}" $.Values.global.application.configFilePathTemplate }}
  {{- $filePath := printf "%s%s" (tpl $fileTemplateString $) $path }}
  {{$name | quote}}: {{ $.Files.Get $filePath | b64enc }}
{{- end -}}
{{- end -}}
{{- with $.Values.global.application.configFiles }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "application-helpers.configs.files-migration.volume-name" $ }}
  labels:
    {{- /*  Override component as it is not defined at place where we call this helper  */}}
    {{- include "application-helpers.labels" (merge (dict "Values" (dict "component" "configs")) $) | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
type: Opaque
data:
{{- range $name, $path := . }}
  {{- $fileTemplateString := default "configs/{{ $.Values.global.application.environment }}" $.Values.global.application.configFilePathTemplate }}
  {{- $filePath := printf "%s%s" (tpl $fileTemplateString $) $path }}
  {{$name | quote}}: {{ $.Files.Get $filePath | b64enc }}
{{- end -}}
{{- end -}}
{{- end -}}