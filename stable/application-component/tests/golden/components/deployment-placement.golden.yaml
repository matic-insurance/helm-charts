---
# Source: application-component/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myproduct-worker
  labels:
    app.kubernetes.io/name: myproduct
    app.kubernetes.io/instance: myproduct-worker
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
    app.kubernetes.io/part-of: myproduct
    app.kubernetes.io/version: "0.0.0"
spec:
  replicas: 1
  minReadySeconds: 1
  progressDeadlineSeconds: 120
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: myproduct
      app.kubernetes.io/instance: myproduct-worker
  template:
    metadata:
      annotations:
        rollme: "123abc"
      labels:
        app.kubernetes.io/name: myproduct
        app.kubernetes.io/instance: myproduct-worker
    spec:
      serviceAccountName: myproduct
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 100
        runAsUser: 100
      containers:
        - name: application-component
          image: "bitnami/ruby:0.0.0"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 600m
              memory: 1500Mi
            requests:
              cpu: 200m
              memory: 500Mi
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                - Ec2Spot
            weight: 1
      topologySpreadConstraints:
      - maxSkew: 2
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway