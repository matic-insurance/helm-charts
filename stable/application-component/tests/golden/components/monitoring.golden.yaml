---
# Source: application-component/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myproduct-webserver
  labels:
    app.kubernetes.io/name: myproduct
    app.kubernetes.io/instance: myproduct-webserver
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webserver
    app.kubernetes.io/part-of: myproduct
    app.kubernetes.io/version: "0.0.0"
    tags.datadoghq.com/env: staging
    tags.datadoghq.com/service: myproduct
    tags.datadoghq.com/version: "0.0.0"
spec:
  replicas: 2
  minReadySeconds: 1
  progressDeadlineSeconds: 120
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: myproduct
      app.kubernetes.io/instance: myproduct-webserver
  template:
    metadata:
      annotations:
        rollme: "123abc"
        inject.istio.io/templates: sidecar,datadog-ust
        ad.datadoghq.com/myproduct-webserver.logs: '[{"source": "ruby"}]'
        ad.datadoghq.com/istio-proxy.logs: '[{"source": "envoy"}]'
        ad.datadoghq.com/istio-proxy.checks: |
          {
            "envoy": {
              "init_config": {},
              "instances": [{
                  "openmetrics_endpoint": "http://%%host%%:15090/stats/prometheus",
                  "collect_server_info": false
              }]
            }
          }
      labels:
        app.kubernetes.io/name: myproduct
        app.kubernetes.io/instance: myproduct-webserver
        app.kubernetes.io/component: webserver
        app.kubernetes.io/version: 0.0.0
        tags.datadoghq.com/env: staging
        tags.datadoghq.com/service: myproduct
        tags.datadoghq.com/version: "0.0.0"
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: myproduct
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: myproduct-webserver
          image: "bitnami/ruby:0.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_TRACE_AGENT_PORT
              value: "8126"
            - name: DD_DOGSTATSD_PORT
              value: "8125"
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_ENTITY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: DD_TAGS
              value: "product:myproduct,element:webserver"
            - name: DD_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SENTRY_RELEASE
              value: "myproduct-0.0.0"
            - name: SENTRY_ENVIRONMENT
              value: staging
          volumeMounts:
            - name: dynamic-sa-token
              mountPath: /var/run/secrets/tokens
              readOnly: true
          resources:
            limits:
              cpu: 1200m
              memory: 1500Mi
            requests:
              cpu: 400m
              memory: 500Mi
      volumes:
        - name: dynamic-sa-token
          projected:
            sources:
              - serviceAccountToken:
                  path: dynamic-sa-token
                  expirationSeconds: 600