apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "application-helpers.fullname" . }}
  labels:
    {{- include "application-helpers.labels" . | nindent 4 }}
    {{- if .Values.global.applicationMonitoring.datadog }}
    {{- include "application-helpers.monitoring.datadog.labels" . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.deployment.replicas }}
  {{- end }}
  minReadySeconds: {{ .Values.deployment.minReadySeconds }}
  progressDeadlineSeconds: {{ .Values.deployment.progressDeadlineSeconds }}
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit }}
  strategy:
    {{- toYaml .Values.deployment.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "application-helpers.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        {{- with .Values.deployment.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and .Values.global.mesh.enabled .Values.global.mesh.injectionEnabled }}
        {{- if .Values.global.applicationMonitoring.datadog }}
        {{- /* Custom injection template to define datadog env variables for sidecar. Configured at istio-system */}}
        inject.istio.io/templates: sidecar,datadog-ust
        {{- end }}
        {{- end }}
        {{- if .Values.global.applicationMonitoring.datadog }}
        {{- /* Correctly attribute applciation logs */}}
        ad.datadoghq.com/{{ include "application-helpers.fullname" . }}.logs: '[{"source": "{{ .Values.deployment.logs.source }}"}]'
        {{- if and .Values.global.mesh.enabled .Values.global.mesh.injectionEnabled }}
        {{- /* Correctly attribute istio logs */}}
        ad.datadoghq.com/istio-proxy.logs: '[{"source": "envoy"}]'
        {{- /* Collect istio metrics from sidecar */}}
        ad.datadoghq.com/istio-proxy.checks: |
          {
            "envoy": {
              "init_config": {},
              "instances": [{
                  "openmetrics_endpoint": "http://%%host%%:15090/stats/prometheus",
                  "collect_server_info": false
              }]
            }
          }
        {{- end }}
        {{- end }}
      labels:
        {{- include "application-helpers.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Values.component }}
        app.kubernetes.io/version: {{ .Values.global.application.version }}
        {{- if .Values.global.applicationMonitoring.datadog }}
        {{- include "application-helpers.monitoring.datadog.labels" . | nindent 8 }}
        {{- end }}
        {{- if and .Values.global.mesh.enabled .Values.global.mesh.injectionEnabled }}
        {{- /* Inject istio sidecar */}}
        sidecar.istio.io/inject: "true"
        {{- end }}
    spec:
      {{- if .Values.global.applicationImage.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.applicationImage.pullSecret }}
      {{- end }}
      serviceAccountName: {{ include "application-helpers.serviceAccountName" . }}
      dnsPolicy: {{ .Values.deployment.dnsPolicy }}
      dnsConfig:
      {{- if .Values.deployment.dnsConfig }}
        {{- toYaml .Values.deployment.dnsConfig | nindent 8 }}
      {{- else }}
        {{- toYaml .Values.defaults.dnsConfig | nindent 8 }}
      {{- end }}
        {{- /* When availability important - extend termination period for 15 seconds while prestop hook running */}}
      {{- if or (eq .Values.availability "critical") (eq .Values.availability "high") }}
      terminationGracePeriodSeconds: {{ add (int .Values.deployment.terminationGracePeriodSeconds) 15 }}
      {{- else }}
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.deployment.securityContext | nindent 8 }}
      containers:
        - name: {{ include "application-helpers.fullname" . }}
          image: {{ include "application-helpers.docker-image" . | quote }}
          {{- if .Values.command }}
          command:
            - "sh"
            - "-c"
            - {{ .Values.command | quote }}
          {{- end }}
          {{- if .Values.service.enabled }}
          ports:
            - containerPort: {{ .Values.deployment.port }}
          {{- end }}
          imagePullPolicy: {{ .Values.global.applicationImage.pullPolicy }}
          {{- if or .Values.global.applicationMonitoring.datadog .Values.global.applicationMonitoring.sentry .Values.deployment.env }}
          env:
          {{- if .Values.global.eksClusterName }}
          {{- include "application-helpers.vault.env" . | nindent 12 }}
          {{- end }}
          {{- if .Values.global.applicationMonitoring.datadog }}
          {{- include "application-helpers.monitoring.datadog.env" . | nindent 12 }}
          {{- end }}
          {{- if .Values.global.applicationMonitoring.sentry }}
          {{- include "application-helpers.monitoring.sentry.env" . | nindent 12 }}
          {{- end }}
          {{- with .Values.deployment.env }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if or .Values.global.application.environmentVariables .Values.deployment.envFrom }}
          envFrom:
          {{- with .Values.global.application.environmentVariables }}
            - secretRef:
                name: {{ include "application-helpers.configs.environment-variables.volume-name" $ }}
          {{- end }}
          {{- with .Values.deployment.envFrom }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          volumeMounts:
            {{- /* Mount service account token to hardcoded path for backward compatibility with settings_reader-vault_resolver <= 0.4.9*/}}
            {{- /* should be removed once we make settings_reader-vault_resolver read token from default location or support custom token location*/}}
            - name: dynamic-sa-token
              mountPath: /var/run/secrets/tokens
              readOnly: true
          {{- with .Values.global.application.configFiles }}
          {{- range $name, $path := . }}
            - name: {{ include "application-helpers.configs.files-runtime.volume-name" $ }}
              mountPath: {{ $path | quote }}
              subPath: {{ $name | quote }}
              readOnly: true
          {{- end }}
          {{- end }}
          {{- with .Values.deployment.volumeMounts }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.deployment.lifecycle }}
          lifecycle:
            {{ toYaml .Values.deployment.lifecycle | nindent 12 }}
          {{ else if or (eq .Values.availability "critical") (eq .Values.availability "high") }}
          {{- /* When availability important - wait 15 seconds before sending TERM signal. This allow upstream services to account for pod changes */}}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 15"]
          {{- /* In common case we wait 5 secons */}}
          {{ else if and .Values.global.mesh.enabled .Values.global.mesh.injectionEnabled .Values.mesh.lifecycle.enabled }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 5"]
          {{- end}}
          {{- if .Values.probes.enabled }}
          {{- $probesType := .Values.probes.type }}
          {{- if and .Values.probes.startupProbe.enabled (or (eq $probesType "all") (eq $probesType "startup")) }}
          startupProbe:
            {{- if .Values.probes.startupProbe.command }}
            exec:
              command: {{ .Values.probes.startupProbe.command }}
            {{- else }}
            httpGet:
              path: {{ .Values.probes.startupProbe.path }}
              port: {{ .Values.deployment.port }}
            {{- end}}
            initialDelaySeconds: {{ .Values.probes.startupProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.startupProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.probes.startupProbe.failureThreshold }}
          {{- end }}
          {{- if and .Values.probes.readinessProbe.enabled (or (eq $probesType "all") (eq $probesType "readiness")) }}
          readinessProbe:
            {{- if .Values.probes.readinessProbe.command }}
            exec:
              command: {{ .Values.probes.readinessProbe.command }}
            {{- else }}
            httpGet:
              path: {{ .Values.probes.readinessProbe.path }}
              port: {{ .Values.deployment.port }}
            {{- end}}
            initialDelaySeconds: {{ .Values.probes.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.probes.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if and .Values.probes.livenessProbe.enabled (or (eq $probesType "all") (eq $probesType "liveness")) }}
          livenessProbe:
            {{- if .Values.probes.livenessProbe.command }}
            exec:
              command: {{ .Values.probes.livenessProbe.command }}
            {{- else }}
            httpGet:
              path: {{ .Values.probes.livenessProbe.path }}
              port: {{ .Values.deployment.port }}
            {{- end}}
            initialDelaySeconds: {{ .Values.probes.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.probes.livenessProbe.failureThreshold }}
          {{- end }}
          {{- end }}
          resources:
            {{- if .Values.deployment.resources }}
            {{- toYaml .Values.deployment.resources | nindent 12 }}
            {{- else }}
            {{- toYaml (get .Values.defaults.resources .Values.resources) | nindent 12 }}
            {{- end }}
        {{- if .Values.additionalContainers }}
        {{- range $index, $container := .Values.additionalContainers }}
        - name: {{ $container.name }}
          image: {{ $container.image }}
          {{- if $container.ports }}
          ports:
            {{- range $port := $container.ports }}
            - containerPort: {{ $port.containerPort }}
            {{- end }}
          {{- end }}
          {{- if $container.resources }}
          resources:
            requests:
              memory: "{{ $container.resources.requests.memory }}"
              cpu: "{{ $container.resources.requests.cpu }}"
            limits:
              memory: "{{ $container.resources.limits.memory }}"
              cpu: "{{ $container.resources.limits.cpu }}"
          {{- end }}
          {{- if $container.env }}
          env:
            {{- range $env := $container.env }}
            - name: {{ $env.name }}
              value: {{ $env.value }}
            {{- end }}
          {{- end }}
          {{- if $container.volumeMounts }}
          volumeMounts:
            {{- range $volumeMount := $container.volumeMounts }}
            - name: {{ $volumeMount.name }}
              mountPath: {{ $volumeMount.mountPath }}
              subPath: {{ $volumeMount.subPath }}
              readOnly: {{ $volumeMount.readOnly | default true }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
      {{- range $index, $container := .Values.initContainers }}
        - name: {{ $container.name }}
          image: {{ $container.image }}
          {{- if $container.restartPolicy }}
          restartPolicy: {{ $container.restartPolicy }}
          {{- end }}
          {{- if $container.command }}
          command:
            {{- range $cmd := $container.command }}
            - "{{ $cmd }}"
            {{- end }}
          {{- end }}
          {{- if $container.args }}
          args:
            {{- range $arg := $container.args }}
            - "{{ $arg }}"
            {{- end }}
          {{- end }}
          {{- if $container.ports }}
          ports:
            {{- range $port := $container.ports }}
            - containerPort: {{ $port.containerPort }}
            {{- end }}
          {{- end }}
          {{- if $container.resources }}
          resources:
            requests:
              memory: "{{ $container.resources.requests.memory }}"
              cpu: "{{ $container.resources.requests.cpu }}"
            limits:
              memory: "{{ $container.resources.limits.memory }}"
              cpu: "{{ $container.resources.limits.cpu }}"
          {{- end }}
          {{- if $container.env }}
          env:
            {{- range $env := $container.env }}
            - name: {{ $env.name }}
              value: "{{ $env.value }}"
            {{- end }}
          {{- end }}
          {{- if $container.volumeMounts }}
          volumeMounts:
            {{- range $volumeMount := $container.volumeMounts }}
            - name: {{ $volumeMount.name }}
              mountPath: {{ $volumeMount.mountPath }}
              {{- if $volumeMount.subPath }}
              subPath: {{ $volumeMount.subPath }}
              {{- end }}
              readOnly: {{ $volumeMount.readOnly | default true }}
            {{- end }}
          {{- end }}
          {{- if $container.probes.enabled }}
          {{- if and $container.probes.startupProbe (eq $container.probes.startupProbe.enabled true) }}
          startupProbe:
            {{- if $container.probes.startupProbe.command }}
            exec:
              command: {{ $container.probes.startupProbe.command }}
            {{- else }}
            httpGet:
              path: {{ $container.probes.startupProbe.path }}
              port: {{ $container.probes.readinessProbe.port }}
            {{- end}}
            initialDelaySeconds: {{ default 5 $container.probes.startupProbe.initialDelaySeconds }}
            timeoutSeconds: {{ default 3 $container.probes.startupProbe.timeoutSeconds }}
            periodSeconds: {{ default 10 $container.probes.startupProbe.periodSeconds }}
            successThreshold: {{ default 1 $container.probes.startupProbe.successThreshold }}
            failureThreshold: {{ default 3 $container.probes.startupProbe.failureThreshold }}
          {{- end }}
          {{- if and $container.probes.readinessProbe (eq $container.probes.readinessProbe.enabled true) }}
          readinessProbe:
            {{- if $container.probes.readinessProbe.command }}
            exec:
              command: {{ $container.probes.readinessProbe.command }}
            {{- else }}
            httpGet:
              path: {{ $container.probes.readinessProbe.path }}
              port: {{ $container.probes.readinessProbe.port }}
            {{- end}}
            initialDelaySeconds: {{ default 5 $container.probes.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ default 3 $container.probes.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ default 10 $container.probes.readinessProbe.periodSeconds }}
            successThreshold: {{ default 1 $container.probes.readinessProbe.successThreshold }}
            failureThreshold: {{ default 3 $container.probes.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if and $container.probes.livenessProbe (eq $container.probes.livenessProbe.enabled true) }}
          livenessProbe:
            {{- if $container.probes.livenessProbe.command }}
            exec:
              command: {{ $container.probes.livenessProbe.command }}
            {{- else }}
            httpGet:
              path: {{ $container.probes.livenessProbe.path }}
              port: {{ $container.probes.readinessProbe.port }}
            {{- end}}
            initialDelaySeconds: {{ default 5 $container.probes.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ default 3 $container.probes.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ default 10 $container.probes.livenessProbe.periodSeconds }}
            successThreshold: {{ default 1 $container.probes.livenessProbe.successThreshold }}
            failureThreshold: {{ default 3 $container.probes.livenessProbe.failureThreshold }}
          {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      volumes:
          {{- /* Mount service account token to hardcoded path for backward compatibility with settings_reader-vault_resolver <= 0.4.9*/}}
          {{- /* should be removed once we make settings_reader-vault_resolver read token from default location or support custom token location*/}}
        - name: dynamic-sa-token
          projected:
            sources:
              - serviceAccountToken:
                  path: dynamic-sa-token
                  expirationSeconds: 600
      {{- with .Values.global.application.configFiles }}
        - name: {{ include "application-helpers.configs.files-runtime.volume-name" $ }}
          secret:
            secretName: {{ include "application-helpers.configs.files-runtime.volume-name" $ }}
      {{- end }}
      {{- with .Values.deployment.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.affinity }}
      affinity:
        {{- toYaml .Values.deployment.affinity | nindent 8 }}
      {{- else }}
      {{- with get .Values.defaults.affinity .Values.placement }}
      affinity:
        {{- toYaml . | nindent 8}}
      {{- end }}
      {{- end }}
      {{- with .Values.deployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml .Values.deployment.topologySpreadConstraints | nindent 8 }}
      {{- else }}
      {{- with get (get .Values.defaults.topologySpreadConstraints .Values.availability) .Values.placement }}
      topologySpreadConstraints:
        {{- range $_, $constraint := . }}
        - labelSelector:
            matchLabels:
              {{- include "application-helpers.selectorLabels" $ | nindent 14 }}
              app.kubernetes.io/version: {{ $.Values.global.application.version }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- end }}
